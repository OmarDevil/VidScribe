Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"39e6dc42-cac3-4c60-812f-1a51a6befa72\" name=\"Changes\" comment=\"util : Update code of donload tool &lt;has isssues&gt;\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/VidScribe0.1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/VidScribe0.1.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/yolov5su.pt\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/yolov8n.pt\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/ازاي تشغل اليوتيوب والشاشه مقفوله وبدون اعلانات #تعلم_على_تيك_توك #techiteasy #tech #iphonetricks #iphonehacks .mp4.part\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/تطبيقات تحتاجها في 2024 #fyp #magic_tech #تطبيقات_أندرويد #تطبيقات .mp4.part\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/راقبوا الكراش براحتكم ماتقلقوش  #fypシ #techtok .mp4\" beforePathEscaped=\"$PROJECT_DIR$/src/راقبوا الكراش براحتكم ماتقلقوش \uD83D\uDE02 ##fypシ ##techtok .mp4\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/شرح تطبيق ثريدز الخاص بالانستجرام #threads #انستقرام #instagram #ثريد #phone #iphonebandag .mp4\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/كيف تمنع ظهور المحتوى الحساس في انستقرام ✅ #انستقرام #انستا #انستقرامي #instagram #insta .mp4\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/\u200Eكل اللى انت محتاج تعرفه عن توثيق الحساب بتاعك على انستجرام  . #meta #metaverified #verification #bluemark #instagramverification #توثيق #توثيق_انستقرام #انستجرام #انستقرام #ميتا .mp4\" beforePathEscaped=\"$PROJECT_DIR$/src/\u200Eكل اللى انت محتاج تعرفه عن توثيق الحساب بتاعك على انستجرام \uD83D\uDC4C\uD83C\uDFFC . ##meta ##metaverified ##verification ##bluemark ##instagramverification ##توثيق ##توثيق_انستقرام ##انستجرام ##انستقرام ##ميتا .mp4\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Amar0005&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/OmarDevil/VidScribe.git&quot;,\r\n    &quot;accountId&quot;: &quot;1b5604db-3cdf-49c0-b6cc-cc1a6666616d&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2u8bJcoVvu174yZQ7dfIOIhWEI8\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.KeyWords.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.downloadtool.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.key words.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.sciprttool.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.voice over.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\omar\\PycharmProjects\\VidScribe0.1\\axl\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"downloadtool\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.13\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/downloadtool.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"key words one word\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\VidScribe\\src\\key words one word.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"sciprttool\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/sciprttool.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"voice over\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/voice over.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n        <item itemvalue=\"Python.downloadtool\" />\r\n        <item itemvalue=\"Python.voice over\" />\r\n        <item itemvalue=\"Python.key words one word\" />\r\n        <item itemvalue=\"Python.sciprttool\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-14705d77f0bb-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.25659.43\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"39e6dc42-cac3-4c60-812f-1a51a6befa72\" name=\"Changes\" comment=\"\" />\r\n      <created>1741633078296</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741633078296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"feat : creates script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741634861216</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741634861216</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"util : made an input for user to enter the script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741635856399</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741635856399</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"util : made an input for user to enter the script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741635983573</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741635983573</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"feat : added option to choose language\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741636052662</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741636052662</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"feat : get specific keywords from gemeni depends on user input\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741642943609</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741642943609</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"feat : get specific keywords from gemeni depends on user input\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741643062342</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741643062342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"feat : code to download videos\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741643369605</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741643369605</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"util : added requirements.txt file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741650567738</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741650567738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"util : merged all files in one file &lt;main.py&gt;&#10;util : added type-hinting method\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741653347404</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741653347404</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"util : Output of Scrpit in file &lt;Scripts&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741828353844</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741828353844</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"util : Output of Key words in file &lt;Key words&gt;&#10;util : change name of file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741830134952</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741830134952</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"util : Change API Key\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741830530707</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741830530707</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"util : Save the output into file voice over and fix some issues\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741830908687</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741830908687</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"feat : creates script\" />\r\n    <MESSAGE value=\"util : made an input for user to enter the script\" />\r\n    <MESSAGE value=\"feat : added option to choose language\" />\r\n    <MESSAGE value=\"feat : get specific keywords from gemeni depends on user input\" />\r\n    <MESSAGE value=\"feat : code to download videos\" />\r\n    <MESSAGE value=\"util : added requirements.txt file\" />\r\n    <MESSAGE value=\"util : merged all files in one file &lt;main.py&gt;&#10;util : added type-hinting method\" />\r\n    <MESSAGE value=\"util : Output of Scrpit in file &lt;Scripts&gt;\" />\r\n    <MESSAGE value=\"util : Output of Key words in file &lt;Key words&gt;&#10;util : change name of file\" />\r\n    <MESSAGE value=\"util : Change API Key\" />\r\n    <MESSAGE value=\"util : Save the output into file voice over and fix some issues\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"util : Save the output into file voice over and fix some issues\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d6973daf8c108bb28704b071db3a6e78992f2a77)
+++ b/.idea/workspace.xml	(date 1742338415304)
@@ -4,19 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="39e6dc42-cac3-4c60-812f-1a51a6befa72" name="Changes" comment="util : Update code of donload tool &lt;has isssues&gt;">
-      <change beforePath="$PROJECT_DIR$/.idea/VidScribe0.1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/VidScribe0.1.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="39e6dc42-cac3-4c60-812f-1a51a6befa72" name="Changes" comment="util : Update code of keyword &lt;add title to every keyword&gt;">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/yolov5su.pt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/yolov8n.pt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/ازاي تشغل اليوتيوب والشاشه مقفوله وبدون اعلانات #تعلم_على_تيك_توك #techiteasy #tech #iphonetricks #iphonehacks .mp4.part" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/تطبيقات تحتاجها في 2024 #fyp #magic_tech #تطبيقات_أندرويد #تطبيقات .mp4.part" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/راقبوا الكراش براحتكم ماتقلقوش  #fypシ #techtok .mp4" beforePathEscaped="$PROJECT_DIR$/src/راقبوا الكراش براحتكم ماتقلقوش 😂 ##fypシ ##techtok .mp4" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/شرح تطبيق ثريدز الخاص بالانستجرام #threads #انستقرام #instagram #ثريد #phone #iphonebandag .mp4" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/كيف تمنع ظهور المحتوى الحساس في انستقرام ✅ #انستقرام #انستا #انستقرامي #instagram #insta .mp4" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/‎كل اللى انت محتاج تعرفه عن توثيق الحساب بتاعك على انستجرام  . #meta #metaverified #verification #bluemark #instagramverification #توثيق #توثيق_انستقرام #انستجرام #انستقرام #ميتا .mp4" beforePathEscaped="$PROJECT_DIR$/src/‎كل اللى انت محتاج تعرفه عن توثيق الحساب بتاعك على انستجرام 👌🏼 . ##meta ##metaverified ##verification ##bluemark ##instagramverification ##توثيق ##توثيق_انستقرام ##انستجرام ##انستقرام ##ميتا .mp4" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -315,7 +305,15 @@
       <option name="project" value="LOCAL" />
       <updated>1741830908687</updated>
     </task>
-    <option name="localTasksCounter" value="14" />
+    <task id="LOCAL-00014" summary="util : Update code of keyword &lt;add title to every keyword&gt;">
+      <option name="closed" value="true" />
+      <created>1742337911025</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1742337911025</updated>
+    </task>
+    <option name="localTasksCounter" value="15" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -330,6 +328,7 @@
     <MESSAGE value="util : Output of Key words in file &lt;Key words&gt;&#10;util : change name of file" />
     <MESSAGE value="util : Change API Key" />
     <MESSAGE value="util : Save the output into file voice over and fix some issues" />
-    <option name="LAST_COMMIT_MESSAGE" value="util : Save the output into file voice over and fix some issues" />
+    <MESSAGE value="util : Update code of keyword &lt;add title to every keyword&gt;" />
+    <option name="LAST_COMMIT_MESSAGE" value="util : Update code of keyword &lt;add title to every keyword&gt;" />
   </component>
 </project>
\ No newline at end of file
Index: src/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List, Optional, Dict, Any\r\nfrom docx import Document\r\nfrom datetime import datetime\r\nimport requests\r\nimport os\r\nimport cv2\r\nimport pytesseract\r\nimport yt_dlp\r\nfrom ultralytics import YOLO\r\nimport google.generativeai as genai\r\nfrom tqdm import tqdm\r\n\r\n# Constants\r\nGENAI_API_KEY = \"AIzaSyAJexsERXMnXxVd7w5zBiHqy2TiXwU8Gis\"\r\nELEVENLABS_API_KEY = \"sk_9cb8fc1fa8d204870d890050a10f6f5e3fc144e1a6b783fd\"\r\nELEVENLABS_VOICE_ID = \"21m00Tcm4TlvDq8ikWAM\"\r\n\r\n# Configure Gemini API\r\ngenai.configure(api_key=GENAI_API_KEY)\r\n\r\n# Define paths\r\nVIDEO_FOLDER = os.path.join(\"..\", \"video\")  # Path to the video folder\r\nDOWNLOADED_VIDEOS_FOLDER = os.path.join(VIDEO_FOLDER, \"downloaded_videos\")\r\nKEYWORDS_FOLDER = os.path.join(VIDEO_FOLDER, \"key_words\")\r\nSCRIPTS_FOLDER = os.path.join(VIDEO_FOLDER, \"scripts\")\r\nVOICE_OVER_FOLDER = os.path.join(VIDEO_FOLDER, \"voice_over\")\r\n\r\n# Create folders if they don't exist\r\nos.makedirs(DOWNLOADED_VIDEOS_FOLDER, exist_ok=True)\r\nos.makedirs(KEYWORDS_FOLDER, exist_ok=True)\r\nos.makedirs(SCRIPTS_FOLDER, exist_ok=True)\r\nos.makedirs(VOICE_OVER_FOLDER, exist_ok=True)\r\n\r\n\r\ndef generate_voice_over_script(topic: str, lang: str = \"en\") -> str:\r\n    \"\"\"\r\n    Generate a voice-over script using Gemini API.\r\n    \"\"\"\r\n    fixed_prompt = \"\"\"\r\n    Write a 60-second voice-over script for a video on the following topic.\r\n    The script should be natural, as if someone is reading it aloud, without timings, musical cues, or additional titles.\r\n    Start the script directly without any title like \"Script for YouTube Video\".\r\n    Keep it simple, easy to understand, direct, and professional.\r\n    Use short sentences and avoid unnecessary details or extra words.\r\n    \"\"\"\r\n    final_prompt = fixed_prompt + \"\\n\\nTopic: \" + topic + \" in \" + lang\r\n    model = genai.GenerativeModel('gemini-1.5-flash')\r\n    response = model.generate_content(final_prompt)\r\n    text = response.text.strip()\r\n\r\n    # Remove unwanted titles\r\n    unwanted_titles = [\"Script for YouTube Video\", \"Voice Over Script\"]\r\n    for title in unwanted_titles:\r\n        if text.startswith(title):\r\n            text = text[len(title):].strip()\r\n\r\n    return text\r\n\r\n\r\ndef save_script_to_docx(text: str, filename: str) -> None:\r\n    \"\"\"\r\n    Save the generated script to a Word document in the scripts folder.\r\n    \"\"\"\r\n    doc = Document()\r\n    doc.add_paragraph(text)\r\n    file_path = os.path.join(SCRIPTS_FOLDER, filename)\r\n    doc.save(file_path)\r\n    print(f\"✅ Voice Over Script saved as {file_path}\")\r\n\r\n\r\ndef extract_keywords(text: str, main_topic: str) -> List[str]:\r\n    \"\"\"\r\n    Extract important keywords from the script and ensure each keyword contains the main topic only once.\r\n    \"\"\"\r\n    model = genai.GenerativeModel(\"gemini-1.5-flash\")\r\n    prompt = (f\"Extract the most important keywords from the following script and return them as a comma-separated \"\r\n              f\"list in English. Ensure each keyword includes '{main_topic}' only once:\\n\\n{text}\")\r\n\r\n    response = model.generate_content(prompt)\r\n    if response.text:\r\n        # تقسيم النص إلى قائمة كلمات مفتاحية\r\n        keywords = response.text.strip().split(\",\")\r\n\r\n        # تنظيف الكلمات من المسافات الزائدة\r\n        cleaned_keywords = [kw.strip() for kw in keywords]\r\n\r\n        # التأكد من عدم تكرار main_topic مرتين داخل أي كلمة مفتاحية\r\n        final_keywords = []\r\n        for kw in cleaned_keywords:\r\n            if main_topic.lower() in kw.lower():\r\n                # إزالة التكرار لو وجد\r\n                kw = kw.replace(main_topic, \"\").strip()\r\n                kw = f\"{main_topic} {kw}\".strip()  # ضمان وجود الكلمة المفتاحية الأساسية في البداية\r\n            else:\r\n                kw = f\"{main_topic} {kw}\".strip()  # لو مش موجودة، نضيفها بطريقة طبيعية\r\n\r\n            final_keywords.append(kw)\r\n\r\n        return final_keywords\r\n\r\n    return []\r\n\r\n\r\ndef save_keywords(keywords: List[str]) -> str:\r\n    \"\"\"\r\n    Save the extracted keywords to a text file in the key_words folder.\r\n    \"\"\"\r\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n    filename = f\"key_words_{timestamp}.txt\"\r\n    file_path = os.path.join(KEYWORDS_FOLDER, filename)\r\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\r\n        for keyword in keywords:\r\n            f.write(keyword + \"\\n\")\r\n    print(f\"✅ Keywords saved in {file_path}\")\r\n    return file_path\r\n\r\n\r\nfrom youtube_search import YoutubeSearch\r\nimport json\r\nimport time\r\n\r\ndef search_videos(query: str, max_results=10, max_retries=3):\r\n    \"\"\"\r\n    Search YouTube for videos containing the query in their title.\r\n    \"\"\"\r\n    for attempt in range(max_retries):\r\n        try:\r\n            # البحث الأول باستخدام العنوان الكامل\r\n            results = YoutubeSearch(query, max_results=max_results).to_json()\r\n            videos = json.loads(results).get(\"videos\", [])\r\n\r\n            # لو مفيش نتائج، نبحث باستخدام الكلمة المفتاحية الأساسية فقط\r\n            if not videos:\r\n                print(f\"⚠ No exact match found for '{query}', trying a broader search...\")\r\n                keywords = query.split()  # تقسيم الكلمات المفتاحية\r\n                if len(keywords) > 1:  # لو فيه أكثر من كلمة\r\n                    broad_query = \" \".join(keywords[:2])  # ناخد أول كلمتين\r\n                else:\r\n                    broad_query = keywords[0]\r\n\r\n                results = YoutubeSearch(broad_query, max_results=max_results).to_json()\r\n                videos = json.loads(results).get(\"videos\", [])\r\n\r\n            return videos\r\n        except Exception as e:\r\n            print(f\"❌ Attempt {attempt + 1} failed: {e}\")\r\n            time.sleep(2)  # انتظار قبل إعادة المحاولة\r\n\r\n    return []  # إرجاع قائمة فارغة لو كل المحاولات فشلت\r\n\r\n\r\ndef get_video_duration(duration_str: str) -> float:\r\n    \"\"\"\r\n    Convert YouTube duration (MM:SS or HH:MM:SS) to seconds.\r\n    \"\"\"\r\n    if isinstance(duration_str, int):\r\n        return duration_str\r\n    parts = list(map(int, duration_str.split(\":\")))\r\n    if len(parts) == 2:\r\n        return parts[0] * 60 + parts[1]\r\n    elif len(parts) == 3:\r\n        return parts[0] * 3600 + parts[1] * 60 + parts[2]\r\n    return float('inf')\r\n\r\n\r\ndef download_video(video: Dict[str, Any], output_dir: str = DOWNLOADED_VIDEOS_FOLDER) -> str:\r\n    \"\"\"\r\n    Download the given video using yt-dlp without merging formats.\r\n    \"\"\"\r\n    os.makedirs(output_dir, exist_ok=True)\r\n    video_url = f\"https://www.youtube.com{video['url_suffix']}\"\r\n    ydl_opts = {\r\n        'outtmpl': os.path.join(output_dir, '%(title)s.%(ext)s'),\r\n        'format': 'bestvideo[ext=mp4]',\r\n    }\r\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\r\n        ydl.download([video_url])\r\n    return os.path.join(output_dir, f\"{video['title']}.mp4\")\r\n\r\n\r\ndef detect_text_in_video(video_path: str) -> bool:\r\n    \"\"\"\r\n    Detect text in video frames using OpenCV and Tesseract OCR.\r\n    \"\"\"\r\n    cap = cv2.VideoCapture(video_path)\r\n    while cap.isOpened():\r\n        ret, frame = cap.read()\r\n        if not ret:\r\n            break\r\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\r\n        text = pytesseract.image_to_string(gray)\r\n        if text.strip():\r\n            print(\"❌ Text detected in video!\")\r\n            cap.release()\r\n            return True\r\n    cap.release()\r\n    return False\r\n\r\n\r\ndef detect_logo_in_video(video_path: str) -> bool:\r\n    \"\"\"\r\n    Detect logos or watermarks using YOLOv5su.\r\n    \"\"\"\r\n    model_path = \"yolov5su.pt\"\r\n    yolo_model = YOLO(\"yolov5su.pt\")\r\n    cap = cv2.VideoCapture(video_path)\r\n    while cap.isOpened():\r\n        ret, frame = cap.read()\r\n        if not ret:\r\n            break\r\n        results = yolo_model(frame)\r\n        for result in results:\r\n            for box in result.boxes:\r\n                class_name = yolo_model.names[int(box.cls[0])]\r\n                if class_name in [\"logo\", \"watermark\", \"text\"]:\r\n                    print(f\"❌ Logo/Watermark detected: {class_name}\")\r\n                    cap.release()\r\n                    return True\r\n    cap.release()\r\n    return False\r\n\r\n\r\ndef convert_text_to_speech(text: str, output_file: str) -> None:\r\n    \"\"\"\r\n    Convert text to speech using ElevenLabs API and save it in the voice_over folder.\r\n    \"\"\"\r\n    url = f\"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}\"\r\n    headers = {\r\n        \"Accept\": \"audio/mpeg\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"xi-api-key\": ELEVENLABS_API_KEY\r\n    }\r\n    data = {\r\n        \"text\": text,\r\n        \"model_id\": \"eleven_multilingual_v2\",\r\n        \"voice_settings\": {\r\n            \"stability\": 0.5,\r\n            \"similarity_boost\": 0.5\r\n        }\r\n    }\r\n    response = requests.post(url, json=data, headers=headers)\r\n    response.raise_for_status()\r\n    file_path = os.path.join(VOICE_OVER_FOLDER, output_file)\r\n    with open(file_path, 'wb') as f:\r\n        for chunk in response.iter_content(chunk_size=1024):\r\n            if chunk:\r\n                f.write(chunk)\r\n    print(f\"✅ Audio saved as {file_path}\")\r\n\r\n\r\ndef main():\r\n    steps = 4  # Total number of main steps\r\n    print(\"\\n\uD83D\uDE80 Starting the process...\\n\")\r\n\r\n    # Step 1: Get User Input Before Starting the Progress Bar\r\n    topic = input(\"\\n\uD83D\uDCCC Enter your script topic : \")\r\n\r\n    # Configure the progress bar with custom styling\r\n    progress_bar = tqdm(\r\n        total=steps,\r\n        desc=\"\uD83D\uDD04 Progress\",\r\n        colour=\"green\",\r\n        bar_format=\"{desc}: {percentage:3.0f}% |{bar}| {n_fmt}/{total_fmt} Steps\"\r\n    )\r\n\r\n    # Step 1: Generate Voice Over Script\r\n    print(\"\\n✍\uFE0F Generating Voice Over Script...\")\r\n    script_text = generate_voice_over_script(topic)\r\n    script_filename = datetime.now().strftime(\"voice_over_%Y%m%d_%H%M%S.docx\")\r\n    save_script_to_docx(script_text, script_filename)\r\n    progress_bar.update(1)\r\n\r\n    # Step 2: Extract Key Sentences\r\n    print(\"\\n\uD83D\uDCD1 Extracting Key Sentences...\")\r\n    key_sentences = extract_keywords(script_text, topic)  # Pass the main topic to include it in keywords\r\n    keywords_filename = save_keywords(key_sentences)\r\n    progress_bar.update(1)\r\n\r\n    # Step 3: Search and Download Videos\r\n    print(\"\\n\uD83C\uDFA5 Searching and Downloading Videos...\")\r\n    keywords = open(keywords_filename, \"r\", encoding=\"utf-8\").read().splitlines()\r\n    for keyword in keywords:\r\n        print(f\"\uD83D\uDD0D Searching for videos with title containing: {keyword}\")\r\n        videos = search_videos(keyword)  # Use the keyword as the title for search\r\n        if not videos:\r\n            print(f\"No videos found with title containing: {keyword}\")\r\n            continue\r\n        for video in videos:\r\n            print(f\"⬇ Downloading: {video['title']} ({video['duration']})\")\r\n            video_path = download_video(video)\r\n            if detect_text_in_video(video_path) or detect_logo_in_video(video_path):\r\n                print(\"❌ Video contains text or logos, deleting...\")\r\n                os.remove(video_path)\r\n            else:\r\n                print(\"✅ Video is clean.\")\r\n    progress_bar.update(1)\r\n\r\n    # Step 4: Convert Script to Speech\r\n    print(\"\\n\uD83D\uDD0A Converting Script to Speech...\")\r\n    audio_filename = datetime.now().strftime(\"voice_over_%Y%m%d_%H%M%S.mp3\")\r\n    convert_text_to_speech(script_text, audio_filename)\r\n    progress_bar.update(1)\r\n\r\n    # Close progress bar\r\n    progress_bar.close()\r\n    print(\"\\n✅ Process completed successfully!\\n\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.py b/src/main.py
--- a/src/main.py	(revision d6973daf8c108bb28704b071db3a6e78992f2a77)
+++ b/src/main.py	(date 1742338062518)
@@ -9,6 +9,9 @@
 from ultralytics import YOLO
 import google.generativeai as genai
 from tqdm import tqdm
+from youtube_search import YoutubeSearch
+import json
+import time
 
 # Constants
 GENAI_API_KEY = "AIzaSyAJexsERXMnXxVd7w5zBiHqy2TiXwU8Gis"
@@ -115,10 +118,6 @@
     return file_path
 
 
-from youtube_search import YoutubeSearch
-import json
-import time
-
 def search_videos(query: str, max_results=10, max_retries=3):
     """
     Search YouTube for videos containing the query in their title.
