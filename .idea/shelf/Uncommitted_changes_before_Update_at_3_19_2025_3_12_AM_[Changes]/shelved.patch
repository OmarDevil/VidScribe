Index: src/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.py b/src/main.py
deleted file mode 100644
--- a/src/main.py	(revision 67219b359e1a13a85481f6a99f702db4ee01a061)
+++ /dev/null	(revision 67219b359e1a13a85481f6a99f702db4ee01a061)
@@ -1,310 +0,0 @@
-from typing import List, Optional, Dict, Any
-from docx import Document
-from datetime import datetime
-import requests
-import os
-import cv2
-import pytesseract
-import yt_dlp
-from ultralytics import YOLO
-import google.generativeai as genai
-from tqdm import tqdm
-
-# Constants
-GENAI_API_KEY = "AIzaSyAJexsERXMnXxVd7w5zBiHqy2TiXwU8Gis"
-ELEVENLABS_API_KEY = "sk_9cb8fc1fa8d204870d890050a10f6f5e3fc144e1a6b783fd"
-ELEVENLABS_VOICE_ID = "21m00Tcm4TlvDq8ikWAM"
-
-# Configure Gemini API
-genai.configure(api_key=GENAI_API_KEY)
-
-# Define paths
-VIDEO_FOLDER = os.path.join("..", "video")  # Path to the video folder
-DOWNLOADED_VIDEOS_FOLDER = os.path.join(VIDEO_FOLDER, "downloaded_videos")
-KEYWORDS_FOLDER = os.path.join(VIDEO_FOLDER, "key_words")
-SCRIPTS_FOLDER = os.path.join(VIDEO_FOLDER, "scripts")
-VOICE_OVER_FOLDER = os.path.join(VIDEO_FOLDER, "voice_over")
-
-# Create folders if they don't exist
-os.makedirs(DOWNLOADED_VIDEOS_FOLDER, exist_ok=True)
-os.makedirs(KEYWORDS_FOLDER, exist_ok=True)
-os.makedirs(SCRIPTS_FOLDER, exist_ok=True)
-os.makedirs(VOICE_OVER_FOLDER, exist_ok=True)
-
-
-def generate_voice_over_script(topic: str, lang: str = "en") -> str:
-    """
-    Generate a voice-over script using Gemini API.
-    """
-    fixed_prompt = """
-    Write a 60-second voice-over script for a video on the following topic.
-    The script should be natural, as if someone is reading it aloud, without timings, musical cues, or additional titles.
-    Start the script directly without any title like "Script for YouTube Video".
-    Keep it simple, easy to understand, direct, and professional.
-    Use short sentences and avoid unnecessary details or extra words.
-    """
-    final_prompt = fixed_prompt + "\n\nTopic: " + topic + " in " + lang
-    model = genai.GenerativeModel('gemini-1.5-flash')
-    response = model.generate_content(final_prompt)
-    text = response.text.strip()
-
-    # Remove unwanted titles
-    unwanted_titles = ["Script for YouTube Video", "Voice Over Script"]
-    for title in unwanted_titles:
-        if text.startswith(title):
-            text = text[len(title):].strip()
-
-    return text
-
-
-def save_script_to_docx(text: str, filename: str) -> None:
-    """
-    Save the generated script to a Word document in the scripts folder.
-    """
-    doc = Document()
-    doc.add_paragraph(text)
-    file_path = os.path.join(SCRIPTS_FOLDER, filename)
-    doc.save(file_path)
-    print(f"✅ Voice Over Script saved as {file_path}")
-
-
-def extract_keywords(text: str, main_topic: str) -> List[str]:
-    """
-    Extract important keywords from the script and ensure each keyword contains the main topic only once.
-    """
-    model = genai.GenerativeModel("gemini-1.5-flash")
-    prompt = (f"Extract the most important keywords from the following script and return them as a comma-separated "
-              f"list in English. Ensure each keyword includes '{main_topic}' only once:\n\n{text}")
-
-    response = model.generate_content(prompt)
-    if response.text:
-        # تقسيم النص إلى قائمة كلمات مفتاحية
-        keywords = response.text.strip().split(",")
-
-        # تنظيف الكلمات من المسافات الزائدة
-        cleaned_keywords = [kw.strip() for kw in keywords]
-
-        # التأكد من عدم تكرار main_topic مرتين داخل أي كلمة مفتاحية
-        final_keywords = []
-        for kw in cleaned_keywords:
-            if main_topic.lower() in kw.lower():
-                # إزالة التكرار لو وجد
-                kw = kw.replace(main_topic, "").strip()
-                kw = f"{main_topic} {kw}".strip()  # ضمان وجود الكلمة المفتاحية الأساسية في البداية
-            else:
-                kw = f"{main_topic} {kw}".strip()  # لو مش موجودة، نضيفها بطريقة طبيعية
-
-            final_keywords.append(kw)
-
-        return final_keywords
-
-    return []
-
-
-def save_keywords(keywords: List[str]) -> str:
-    """
-    Save the extracted keywords to a text file in the key_words folder.
-    """
-    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
-    filename = f"key_words_{timestamp}.txt"
-    file_path = os.path.join(KEYWORDS_FOLDER, filename)
-    with open(file_path, "w", encoding="utf-8") as f:
-        for keyword in keywords:
-            f.write(keyword + "\n")
-    print(f"✅ Keywords saved in {file_path}")
-    return file_path
-
-
-from youtube_search import YoutubeSearch
-import json
-import time
-
-def search_videos(query: str, max_results=10, max_retries=3):
-    """
-    Search YouTube for videos containing the query in their title.
-    """
-    for attempt in range(max_retries):
-        try:
-            # البحث الأول باستخدام العنوان الكامل
-            results = YoutubeSearch(query, max_results=max_results).to_json()
-            videos = json.loads(results).get("videos", [])
-
-            # لو مفيش نتائج، نبحث باستخدام الكلمة المفتاحية الأساسية فقط
-            if not videos:
-                print(f"⚠ No exact match found for '{query}', trying a broader search...")
-                keywords = query.split()  # تقسيم الكلمات المفتاحية
-                if len(keywords) > 1:  # لو فيه أكثر من كلمة
-                    broad_query = " ".join(keywords[:2])  # ناخد أول كلمتين
-                else:
-                    broad_query = keywords[0]
-
-                results = YoutubeSearch(broad_query, max_results=max_results).to_json()
-                videos = json.loads(results).get("videos", [])
-
-            return videos
-        except Exception as e:
-            print(f"❌ Attempt {attempt + 1} failed: {e}")
-            time.sleep(2)  # انتظار قبل إعادة المحاولة
-
-    return []  # إرجاع قائمة فارغة لو كل المحاولات فشلت
-
-
-def get_video_duration(duration_str: str) -> float:
-    """
-    Convert YouTube duration (MM:SS or HH:MM:SS) to seconds.
-    """
-    if isinstance(duration_str, int):
-        return duration_str
-    parts = list(map(int, duration_str.split(":")))
-    if len(parts) == 2:
-        return parts[0] * 60 + parts[1]
-    elif len(parts) == 3:
-        return parts[0] * 3600 + parts[1] * 60 + parts[2]
-    return float('inf')
-
-
-def download_video(video: Dict[str, Any], output_dir: str = DOWNLOADED_VIDEOS_FOLDER) -> str:
-    """
-    Download the given video using yt-dlp without merging formats.
-    """
-    os.makedirs(output_dir, exist_ok=True)
-    video_url = f"https://www.youtube.com{video['url_suffix']}"
-    ydl_opts = {
-        'outtmpl': os.path.join(output_dir, '%(title)s.%(ext)s'),
-        'format': 'bestvideo[ext=mp4]',
-    }
-    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
-        ydl.download([video_url])
-    return os.path.join(output_dir, f"{video['title']}.mp4")
-
-
-def detect_text_in_video(video_path: str) -> bool:
-    """
-    Detect text in video frames using OpenCV and Tesseract OCR.
-    """
-    cap = cv2.VideoCapture(video_path)
-    while cap.isOpened():
-        ret, frame = cap.read()
-        if not ret:
-            break
-        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
-        text = pytesseract.image_to_string(gray)
-        if text.strip():
-            print("❌ Text detected in video!")
-            cap.release()
-            return True
-    cap.release()
-    return False
-
-
-def detect_logo_in_video(video_path: str) -> bool:
-    """
-    Detect logos or watermarks using YOLOv5su.
-    """
-    model_path = "yolov5su.pt"
-    yolo_model = YOLO("yolov5su.pt")
-    cap = cv2.VideoCapture(video_path)
-    while cap.isOpened():
-        ret, frame = cap.read()
-        if not ret:
-            break
-        results = yolo_model(frame)
-        for result in results:
-            for box in result.boxes:
-                class_name = yolo_model.names[int(box.cls[0])]
-                if class_name in ["logo", "watermark", "text"]:
-                    print(f"❌ Logo/Watermark detected: {class_name}")
-                    cap.release()
-                    return True
-    cap.release()
-    return False
-
-
-def convert_text_to_speech(text: str, output_file: str) -> None:
-    """
-    Convert text to speech using ElevenLabs API and save it in the voice_over folder.
-    """
-    url = f"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}"
-    headers = {
-        "Accept": "audio/mpeg",
-        "Content-Type": "application/json",
-        "xi-api-key": ELEVENLABS_API_KEY
-    }
-    data = {
-        "text": text,
-        "model_id": "eleven_multilingual_v2",
-        "voice_settings": {
-            "stability": 0.5,
-            "similarity_boost": 0.5
-        }
-    }
-    response = requests.post(url, json=data, headers=headers)
-    response.raise_for_status()
-    file_path = os.path.join(VOICE_OVER_FOLDER, output_file)
-    with open(file_path, 'wb') as f:
-        for chunk in response.iter_content(chunk_size=1024):
-            if chunk:
-                f.write(chunk)
-    print(f"✅ Audio saved as {file_path}")
-
-
-def main():
-    steps = 4  # Total number of main steps
-    print("\n🚀 Starting the process...\n")
-
-    # Step 1: Get User Input Before Starting the Progress Bar
-    topic = input("\n📌 Enter your script topic : ")
-
-    # Configure the progress bar with custom styling
-    progress_bar = tqdm(
-        total=steps,
-        desc="🔄 Progress",
-        colour="green",
-        bar_format="{desc}: {percentage:3.0f}% |{bar}| {n_fmt}/{total_fmt} Steps"
-    )
-
-    # Step 1: Generate Voice Over Script
-    print("\n✍️ Generating Voice Over Script...")
-    script_text = generate_voice_over_script(topic)
-    script_filename = datetime.now().strftime("voice_over_%Y%m%d_%H%M%S.docx")
-    save_script_to_docx(script_text, script_filename)
-    progress_bar.update(1)
-
-    # Step 2: Extract Key Sentences
-    print("\n📑 Extracting Key Sentences...")
-    key_sentences = extract_keywords(script_text, topic)  # Pass the main topic to include it in keywords
-    keywords_filename = save_keywords(key_sentences)
-    progress_bar.update(1)
-
-    # Step 3: Search and Download Videos
-    print("\n🎥 Searching and Downloading Videos...")
-    keywords = open(keywords_filename, "r", encoding="utf-8").read().splitlines()
-    for keyword in keywords:
-        print(f"🔍 Searching for videos with title containing: {keyword}")
-        videos = search_videos(keyword)  # Use the keyword as the title for search
-        if not videos:
-            print(f"No videos found with title containing: {keyword}")
-            continue
-        for video in videos:
-            print(f"⬇ Downloading: {video['title']} ({video['duration']})")
-            video_path = download_video(video)
-            if detect_text_in_video(video_path) or detect_logo_in_video(video_path):
-                print("❌ Video contains text or logos, deleting...")
-                os.remove(video_path)
-            else:
-                print("✅ Video is clean.")
-    progress_bar.update(1)
-
-    # Step 4: Convert Script to Speech
-    print("\n🔊 Converting Script to Speech...")
-    audio_filename = datetime.now().strftime("voice_over_%Y%m%d_%H%M%S.mp3")
-    convert_text_to_speech(script_text, audio_filename)
-    progress_bar.update(1)
-
-    # Close progress bar
-    progress_bar.close()
-    print("\n✅ Process completed successfully!\n")
-
-
-if __name__ == "__main__":
-    main()
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"39e6dc42-cac3-4c60-812f-1a51a6befa72\" name=\"Changes\" comment=\"util : Update code of keyword &lt;add title to every keyword&gt;\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Amar0005&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/OmarDevil/VidScribe.git&quot;,\r\n    &quot;accountId&quot;: &quot;1b5604db-3cdf-49c0-b6cc-cc1a6666616d&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2u8bJcoVvu174yZQ7dfIOIhWEI8\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.KeyWords.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.downloadtool.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.key words.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.sciprttool.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.voice over.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\omar\\PycharmProjects\\VidScribe0.1\\axl\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"downloadtool\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.13\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/downloadtool.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"key words one word\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"D:\\VidScribe\\src\\key words one word.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"sciprttool\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/sciprttool.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"voice over\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"VidScribe0.1\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/src\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/voice over.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n        <item itemvalue=\"Python.downloadtool\" />\r\n        <item itemvalue=\"Python.voice over\" />\r\n        <item itemvalue=\"Python.key words one word\" />\r\n        <item itemvalue=\"Python.sciprttool\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-14705d77f0bb-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.25659.43\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"39e6dc42-cac3-4c60-812f-1a51a6befa72\" name=\"Changes\" comment=\"\" />\r\n      <created>1741633078296</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741633078296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"feat : creates script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741634861216</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741634861216</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"util : made an input for user to enter the script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741635856399</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741635856399</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"util : made an input for user to enter the script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741635983573</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741635983573</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"feat : added option to choose language\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741636052662</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741636052662</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"feat : get specific keywords from gemeni depends on user input\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741642943609</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741642943609</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"feat : get specific keywords from gemeni depends on user input\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741643062342</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741643062342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"feat : code to download videos\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741643369605</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741643369605</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"util : added requirements.txt file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741650567738</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741650567738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"util : merged all files in one file &lt;main.py&gt;&#10;util : added type-hinting method\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741653347404</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741653347404</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"util : Output of Scrpit in file &lt;Scripts&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741828353844</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741828353844</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"util : Output of Key words in file &lt;Key words&gt;&#10;util : change name of file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741830134952</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741830134952</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"util : Change API Key\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741830530707</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741830530707</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"util : Save the output into file voice over and fix some issues\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741830908687</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741830908687</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"util : Update code of keyword &lt;add title to every keyword&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742339152922</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742339152922</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"15\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"feat : creates script\" />\r\n    <MESSAGE value=\"util : made an input for user to enter the script\" />\r\n    <MESSAGE value=\"feat : added option to choose language\" />\r\n    <MESSAGE value=\"feat : get specific keywords from gemeni depends on user input\" />\r\n    <MESSAGE value=\"feat : code to download videos\" />\r\n    <MESSAGE value=\"util : added requirements.txt file\" />\r\n    <MESSAGE value=\"util : merged all files in one file &lt;main.py&gt;&#10;util : added type-hinting method\" />\r\n    <MESSAGE value=\"util : Output of Scrpit in file &lt;Scripts&gt;\" />\r\n    <MESSAGE value=\"util : Output of Key words in file &lt;Key words&gt;&#10;util : change name of file\" />\r\n    <MESSAGE value=\"util : Change API Key\" />\r\n    <MESSAGE value=\"util : Save the output into file voice over and fix some issues\" />\r\n    <MESSAGE value=\"util : Update code of keyword &lt;add title to every keyword&gt;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"util : Update code of keyword &lt;add title to every keyword&gt;\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 67219b359e1a13a85481f6a99f702db4ee01a061)
+++ b/.idea/workspace.xml	(date 1742339954129)
@@ -4,7 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="39e6dc42-cac3-4c60-812f-1a51a6befa72" name="Changes" comment="util : Update code of keyword &lt;add title to every keyword&gt;" />
+    <list default="true" id="39e6dc42-cac3-4c60-812f-1a51a6befa72" name="Changes" comment="util : Update code of keyword &lt;add title to every keyword&gt;">
+      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main.py" beforeDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -310,7 +314,15 @@
       <option name="project" value="LOCAL" />
       <updated>1742339152922</updated>
     </task>
-    <option name="localTasksCounter" value="15" />
+    <task id="LOCAL-00015" summary="util : Update code of keyword &lt;add title to every keyword&gt;">
+      <option name="closed" value="true" />
+      <created>1742339552082</created>
+      <option name="number" value="00015" />
+      <option name="presentableId" value="LOCAL-00015" />
+      <option name="project" value="LOCAL" />
+      <updated>1742339552082</updated>
+    </task>
+    <option name="localTasksCounter" value="16" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 67219b359e1a13a85481f6a99f702db4ee01a061)
+++ b/.idea/vcs.xml	(date 1742339756546)
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/VidScribe" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
